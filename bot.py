import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

questions = [
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
    "–ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å, —Å–≤–∞—Ä—â–∏–∫, –∏–Ω–∂–µ–Ω–µ—Ä –∏ —Ç.–¥.)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–ø–ª–æ–º –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 2 –≥–æ–¥–∞?",
    "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞? (B1, A2, –Ω–µ—Ç)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É –≤ –ì–µ—Ä–º–∞–Ω–∏—é?"
]

user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="B1"), KeyboardButton(text="A2"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã –≤ –ì–µ—Ä–º–∞–Ω–∏—é "
        "–∏ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ –ï–≤—Ä–æ–ø—É!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    user_data[message.chat.id] = {"answers": [], "current_q": 0}
    await ask_question(message.chat.id)

async def ask_question(chat_id):
    current_q = user_data[chat_id]["current_q"]
    
    if current_q >= len(questions):
        await evaluate(chat_id)
        return

    markup = None
    if current_q in [2, 3, 5]:  # –≤–æ–ø—Ä–æ—Å—ã —Å –î–∞/–ù–µ—Ç
        markup = yes_no_keyboard
    elif current_q == 4:  # –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —è–∑—ã–∫
        markup = lang_keyboard

    await bot.send_message(chat_id, questions[current_q], reply_markup=markup)

@dp.message()
async def handle_message(message: types.Message):
    chat_id = message.chat.id

    if chat_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    user_data[chat_id]["answers"].append(message.text)
    user_data[chat_id]["current_q"] += 1
    await ask_question(chat_id)

async def evaluate(chat_id):
    answers = user_data[chat_id]["answers"]

    try:
        age = int(answers[0])
    except ValueError:
        age = 0

    profession = answers[1].lower()
    diploma = answers[2].lower()
    experience = answers[3].lower()
    language = answers[4].lower()
    invitation = answers[5].lower()

    good_professions = ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "—Å–≤–∞—Ä—â–∏–∫", "–∏–Ω–∂–µ–Ω–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–∏–∫", "–ø–ª–∏—Ç–æ—á–Ω–∏–∫", "–º–∞–ª—è—Ä", "—à—Ç—É–∫–∞—Ç—É—Ä"]
    passed = True

    if not (20 <= age <= 55):
        passed = False
    if profession not in good_professions:
        passed = False
    if diploma != "–¥–∞":
        passed = False
    if experience != "–¥–∞":
        passed = False
    if language != "b1":
        passed = False

    if passed and invitation == "–¥–∞":
        await bot.send_message(chat_id, 
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É –≤ –ì–µ—Ä–º–∞–Ω–∏—é!\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\n"
            "- –ù–∞–π–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ [arbeitsagentur.de](https://www.arbeitsagentur.de)\n"
            "- –ü–æ–ª—É—á–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "- –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤–∏–∑—É –≤ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –ì–µ—Ä–º–∞–Ω–∏–∏."
        )
    else:
        await bot.send_message(chat_id, 
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—ã –≤ –ì–µ—Ä–º–∞–Ω–∏—é —Å–µ–π—á–∞—Å –Ω–µ–≤—ã—Å–æ–∫–∏–µ.\n\n"
            "–ù–û! –ï—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –µ–≤—Ä–æ–ø–µ–π—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!\n"
            "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫ –∑–∞ 3-5 –º–µ—Å—è—Ü–µ–≤ –ø–æ–ª—É—á–∏—Ç—å –í–ù–ñ –∏ –ª–µ–≥–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ï–≤—Ä–æ–ø–µ?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ üëâ –•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
        )
    
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {chat_id}: {answers}")
    user_data.pop(chat_id)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
