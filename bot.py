# visa_bot/bot.py

import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN, ADMIN_ID
import text_templates
import questions

class Form(StatesGroup):
    age = State()
    profession = State()
    education = State()
    experience = State()
    language = State()
    invitation = State()
    user_name = State()
    user_contact = State()
    user_comment = State()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# FSM Start
async def start(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}")
    await message.answer(text_templates.start_text)
    await asyncio.sleep(1.5)
    await message.answer(questions.QUESTIONS[0])
    await state.set_state(Form.age)

async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer(questions.QUESTIONS[1])
    await state.set_state(Form.profession)

async def process_profession(message: types.Message, state: FSMContext):
    await state.update_data(profession=message.text)
    await message.answer(questions.QUESTIONS[2])
    await state.set_state(Form.education)

async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer(questions.QUESTIONS[3])
    await state.set_state(Form.experience)

async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer(questions.QUESTIONS[4])
    await state.set_state(Form.language)

async def process_language(message: types.Message, state: FSMContext):
    await state.update_data(language=message.text)
    await message.answer(questions.QUESTIONS[5])
    await state.set_state(Form.invitation)

async def process_invitation(message: types.Message, state: FSMContext):
    await state.update_data(invitation=message.text)
    data = await state.get_data()
    result_text, is_high_chance = evaluate_answers(data)

    await asyncio.sleep(1.5)
    if is_high_chance:
        await message.answer(result_text)
        await bot.send_message(ADMIN_ID, f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç {message.from_user.username or message.from_user.id}: {list(data.values())}")
    else:
        await message.answer(text_templates.low_chance_intro, reply_markup=alternative_entry_keyboard())

    await state.clear()

# FSM Responses After Low Chance Path
async def handle_low_chance_choice(message: types.Message, state: FSMContext):
    text = message.text.lower()
    if "—É–∑–Ω–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É" in text:
        await message.answer(text_templates.alternative_warning, reply_markup=alternative_more_keyboard())
    elif "–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ" in text:
        await message.answer(text_templates.alternative_program, reply_markup=start_process_keyboard())
    elif "—Ö–æ—á—É –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" in text:
        await message.answer(text_templates.alternative_steps, reply_markup=leave_request_keyboard())
    elif "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" in text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Form.user_name)
    elif "–Ω–∞–∑–∞–¥" in text:
        await message.answer(text_templates.low_chance_intro, reply_markup=alternative_entry_keyboard())

async def collect_user_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email:")
    await state.set_state(Form.user_contact)

async def collect_user_contact(message: types.Message, state: FSMContext):
    await state.update_data(user_contact=message.text)
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(Form.user_comment)

async def collect_user_comment(message: types.Message, state: FSMContext):
    await state.update_data(user_comment=message.text)
    data = await state.get_data()
    summary = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –ò–º—è: {data.get('user_name')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('user_contact')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('user_comment')}\n"
        f"üîó Telegram: @{message.from_user.username or message.from_user.id}"
    )
    await bot.send_message(ADMIN_ID, summary)
    await message.answer(text_templates.thank_you_text)
    await state.clear()

# Support Functions
def evaluate_answers(data):
    score = 0
    try:
        age = int(data['age'])
        if 20 <= age <= 55:
            score += 1
    except:
        pass

    if data['profession'].lower() in questions.VALID_PROFESSIONS:
        score += 1
    if data['education'].lower() == "–¥–∞":
        score += 1
    if data['experience'].lower() == "–¥–∞":
        score += 1
    if data['language'].strip().upper() == "B1":
        score += 1
    if data['invitation'].lower() == "–¥–∞":
        score += 1

    return text_templates.high_chance_text, (score / 6) * 100 >= 70

def alternative_entry_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîç –£–∑–Ω–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")]],
        resize_keyboard=True
    )

def alternative_more_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")]],
        resize_keyboard=True
    )

def start_process_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –•–æ—á—É –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )

def leave_request_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")]],
        resize_keyboard=True
    )

# Register Handlers
dp.message.register(start, CommandStart())
dp.message.register(process_age, Form.age)
dp.message.register(process_profession, Form.profession)
dp.message.register(process_education, Form.education)
dp.message.register(process_experience, Form.experience)
dp.message.register(process_language, Form.language)
dp.message.register(process_invitation, Form.invitation)
dp.message.register(handle_low_chance_choice, F.text.lower().contains("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É") | F.text.lower().contains("–ø—Ä–æ–≥—Ä–∞–º–º—É") | F.text.lower().contains("–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ") | F.text.lower().contains("–∑–∞—è–≤–∫—É") | F.text.lower().contains("–Ω–∞–∑–∞–¥"))
dp.message.register(collect_user_name, Form.user_name)
dp.message.register(collect_user_contact, Form.user_contact)
dp.message.register(collect_user_comment, Form.user_comment)

# Main
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
