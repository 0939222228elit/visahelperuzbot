# visa_bot/bot.py

import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN, ADMIN_ID
import text_templates
import questions

class Form(StatesGroup):
    age = State()
    profession = State()
    education = State()
    experience = State()
    language = State()
    invitation = State()

class AltStates(StatesGroup):
    waiting_for_country = State()
    user_name = State()
    user_contact = State()
    user_comment = State()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def type_and_send(message: types.Message, text: str, delay: float = 1.5):
    await message.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(delay)
    await message.answer(text, parse_mode="Markdown")

async def start(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}")
    await type_and_send(message, text_templates.start_text)
    await type_and_send(message, questions.QUESTIONS[0])
    await state.set_state(Form.age)

async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await type_and_send(message, questions.QUESTIONS[1])
    await state.set_state(Form.profession)

async def process_profession(message: types.Message, state: FSMContext):
    await state.update_data(profession=message.text)
    await type_and_send(message, questions.QUESTIONS[2])
    await state.set_state(Form.education)

async def process_education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await type_and_send(message, questions.QUESTIONS[3])
    await state.set_state(Form.experience)

async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await type_and_send(message, questions.QUESTIONS[4])
    await state.set_state(Form.language)

async def process_language(message: types.Message, state: FSMContext):
    await state.update_data(language=message.text)
    await type_and_send(message, questions.QUESTIONS[5])
    await state.set_state(Form.invitation)

async def process_invitation(message: types.Message, state: FSMContext):
    await state.update_data(invitation=message.text)
    data = await state.get_data()
    result_text, is_high_chance = evaluate_answers(data)

    if is_high_chance:
        await type_and_send(message, result_text)
        await bot.send_message(ADMIN_ID, f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç {message.from_user.username or message.from_user.id}: {list(data.values())}")
        await state.clear()
    else:
        await type_and_send(message, text_templates.low_chance_detailed)
        await type_and_send(message, text_templates.country_intro)
        await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞"), KeyboardButton(text="üá≤üá© –ú–æ–ª–¥–æ–≤–∞")],
                     [KeyboardButton(text="üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è"), KeyboardButton(text="üá¨üá™ –ì—Ä—É–∑–∏—è")]],
            resize_keyboard=True
        ))
        await state.set_state(AltStates.waiting_for_country)

async def choose_country(message: types.Message, state: FSMContext):
    current = await state.get_state()
    if current != AltStates.waiting_for_country.state:
        return

    country = message.text.lower().strip().replace("\\", "")

    if "—É–∫—Ä–∞–∏–Ω–∞" in country:
        await type_and_send(message, text_templates.ukraine_text)
    elif "–∞—Ä–º–µ–Ω–∏—è" in country:
        await type_and_send(message, text_templates.armenia_text)
    elif "–º–æ–ª–¥–æ–≤–∞" in country:
        await type_and_send(message, text_templates.moldova_text)
    elif "–≥—Ä—É–∑–∏—è" in country:
        await type_and_send(message, text_templates.georgia_text)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚¨áÔ∏è")
        return

    await message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(AltStates.user_name)

# –ù–µ –∑–∞–±—É–¥—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å choose_country –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö: 
# dp.message.register(choose_country, AltStates.waiting_for_country)
