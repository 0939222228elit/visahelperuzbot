import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from config import BOT_TOKEN, ADMIN_ID
import questions
import text_templates

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"answers": [], "current_q": 0}
    await message.answer(text_templates.start_text)
    await bot.send_message(chat_id, questions.QUESTIONS[0])

@dp.message()
async def handle_user_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip().lower()

    if chat_id not in user_data:
        if "—Ö–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ" in text:
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ! –û–±—ä—è—Å–Ω—è–µ–º:\n\n"
                "- –í—ã –º–æ–∂–µ—Ç–µ –±–µ–∑ –≤–∏–∑—ã –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ –£–∫—Ä–∞–∏–Ω—É.\n"
                "- –†–∞–±–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ.\n"
                "- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∂–∏–ª—å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É!\n"
                "- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –í–ù–ñ –∑–∞ 3-5 –º–µ—Å—è—Ü–µ–≤.\n"
                "- –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ù–ñ ‚Äî –ø–æ–¥–∞—á–∞ –Ω–∞ –≤–∏–∑—É –≤ –ï–≤—Ä–æ–ø—É.\n"
                "- –ó–∞—Ä–ø–ª–∞—Ç—ã –≤ –£–∫—Ä–∞–∏–Ω–µ –æ—Ç **800 –¥–æ 2000 –¥–æ–ª–ª–∞—Ä–æ–≤**.\n"
                "- –ü–æ—Å–ª–µ –≤–∏–∑—ã ‚Äî —Ä–∞–±–æ—Ç–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ –æ—Ç **3000 –µ–≤—Ä–æ**.\n\n"
                "**–≠—Ç–æ –ª–µ–≥–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫—É—Ä–∏—Ä—É–µ–º—ã–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏!**\n\n"
                "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —ç—Ç–∞–ø—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ üëâ _–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å_"
            )
        elif "—Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" in text:
            await message.answer(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                "**–≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n"
                "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞).\n"
                "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                "3. –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞!\n\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!"
            )
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    data = user_data[chat_id]
    current_q = data["current_q"]

    data["answers"].append(message.text)
    data["current_q"] += 1

    if data["current_q"] < len(questions.QUESTIONS):
        await bot.send_message(chat_id, questions.QUESTIONS[data["current_q"]])
    else:
        result = evaluate_answers(data["answers"])
        await bot.send_message(chat_id, result)
        await bot.send_message(ADMIN_ID, f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {chat_id}: {data['answers']}")
        user_data.pop(chat_id)

def evaluate_answers(answers):
    score = 0

    try:
        age = int(answers[0])
        if 20 <= age <= 55:
            score += 1
    except:
        pass

    good_professions = ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "—Å–≤–∞—Ä—â–∏–∫", "–∏–Ω–∂–µ–Ω–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–∏–∫", "–º–æ–Ω—Ç–∞–∂–Ω–∏–∫"]
    profession = answers[1].lower()
    if any(prof in profession for prof in good_professions):
        score += 1

    if answers[2].lower() == "–¥–∞":
        score += 1
    if answers[3].lower() == "–¥–∞":
        score += 1
    if answers[4].lower() == "b1":
        score += 1
    if answers[5].lower() == "–¥–∞":
        score += 1

    if score >= 5:
        return text_templates.high_chances_text
    else:
        return text_templates.low_chances_text

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
